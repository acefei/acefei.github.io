<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Acefei 's One Piece</title><link href="https://acefei.github.io/" rel="alternate"></link><link href="https://acefei.github.io/feeds/all.atom.xml" rel="self"></link><id>https://acefei.github.io/</id><updated>2017-10-30T09:17:00+08:00</updated><entry><title>使用Scrapyd和Scrapyd-client部署爬虫</title><link href="https://acefei.github.io/shi-yong-scrapydhe-scrapyd-clientbu-shu-pa-chong.html" rel="alternate"></link><published>2017-10-30T09:17:00+08:00</published><updated>2017-10-30T09:17:00+08:00</updated><author><name>Ace Fei</name></author><id>tag:acefei.github.io,2017-10-30:/shi-yong-scrapydhe-scrapyd-clientbu-shu-pa-chong.html</id><summary type="html">
&lt;h3 id="_1"&gt;基本介绍&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="scrapyd"&gt;&lt;a href="https://github.com/scrapy/scrapyd"&gt;Scrapyd&lt;/a&gt;&lt;a class="headerlink" href="#scrapyd" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Scrapyd is a service for running Scrapy spiders.
It allows you to deploy your Scrapy projects and control their spiders using a HTTP JSON API.  &lt;br/&gt;
Scrapyd can manage multiple projects and each project can have multiple versions uploaded, but only the latest one will be used for launching …&lt;/p&gt;</summary><content type="html">
&lt;h3 id="_1"&gt;基本介绍&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="scrapyd"&gt;&lt;a href="https://github.com/scrapy/scrapyd"&gt;Scrapyd&lt;/a&gt;&lt;a class="headerlink" href="#scrapyd" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Scrapyd is a service for running Scrapy spiders.
It allows you to deploy your Scrapy projects and control their spiders using a HTTP JSON API.  &lt;br/&gt;
Scrapyd can manage multiple projects and each project can have multiple versions uploaded, but only the latest one will be used for launching new spiders.&lt;/p&gt;
&lt;h4 id="scrapyd-client"&gt;&lt;a href="https://github.com/scrapy/scrapyd-client"&gt;Scrapyd-client&lt;/a&gt;&lt;a class="headerlink" href="#scrapyd-client" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Scrapyd-client is a client for Scrapyd. It provides the general scrapyd-client and the scrapyd-deploy utility which allows you to deploy your project to a Scrapyd server.&lt;/p&gt;
&lt;h3 id="_2"&gt;安装&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install scrapyd scrapyd-client
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_3"&gt;配置服务器信息&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当我们使用scrapy startnewproject来创建新工程时，会自动生成一个scrapy.cfg文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Automatically created by: scrapy startproject
#
# For more information about the [deploy] section see:
# https://scrapyd.readthedocs.org/en/latest/deploy.html

[settings]
default = prototypes.settings

[deploy:proto_server]
url = http://localhost:6800/
project = prototypes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中有两个地方是需要我们更新的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;proto_server是自定义的服务器名称       &lt;br/&gt;
url是指scrapyd启动后，默认的服务器地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="scrapyd_1"&gt;启动scrapyd服务&lt;a class="headerlink" href="#scrapyd_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;执行scrapyd，然后用浏览器打开http://localhost:6800/查看界面是否启动成功&lt;/p&gt;
&lt;h3 id="project"&gt;部署project&lt;a class="headerlink" href="#project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;部署有两种方式：
1. 通过json API:
&lt;a href="http://scrapyd.readthedocs.io/en/stable/api.html?highlight=egg#addversion-json"&gt;addversion.json&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://localhost:6800/addversion.json -F project=prototypes -F version=r23 -F egg=@prototypes.egg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中egg需要用scrapyd-deploy来生成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 进入scrapy工程目录
scrapyd-deploy --build-egg prototypes.egg
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;通过scrapyd-deploy一键部署&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scrapyd-deploy proto_server -p prototypes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;部署好后，我们可以用命令查看&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scrapyd-deploy -L proto_server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在http://localhost:6800/查看界面发现Available projects：&lt;strong&gt;prototypes&lt;/strong&gt; &lt;br/&gt;
&lt;img alt="image" src="http://note.youdao.com/favicon.ico"/&gt;&lt;/p&gt;
&lt;h3 id="spider"&gt;运行spider&lt;a class="headerlink" href="#spider" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://localhost:6800/schedule.json -d project=prototypes -d spider=qichacha
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note:
请务必确认在spider脚本中的初始化中对父类也进行初始化，否则会报错&lt;code&gt;exceptions.TypeError: __init__() got an unexpected keyword argument '_job'&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="further"&gt;Further&lt;a class="headerlink" href="#further" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;[ ]  集成&lt;a href="https://github.com/DormyMo/SpiderKeeper"&gt;DormyMo/SpiderKeeper&lt;/a&gt;或&lt;a href="https://github.com/Gerapy/Gerapy"&gt;Gerapy/Gerapy&lt;/a&gt;&lt;/p&gt;</content><category term="python"></category><category term="scrapy"></category></entry><entry><title>在Centos7上使用Python操作Mysql实践</title><link href="https://acefei.github.io/zai-centos7shang-shi-yong-pythoncao-zuo-mysqlshi-jian.html" rel="alternate"></link><published>2017-10-27T01:14:00+08:00</published><updated>2017-10-27T01:14:00+08:00</updated><author><name>Ace Fei</name></author><id>tag:acefei.github.io,2017-10-27:/zai-centos7shang-shi-yong-pythoncao-zuo-mysqlshi-jian.html</id><summary type="html">
&lt;h3 id="centos7mysql"&gt;Centos7上安装mysql&lt;a class="headerlink" href="#centos7mysql" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install mysql mysql-devel
# centos7上已经使用mariadb替换了mysql，它们仅在安装配置上有些区别，使用上没有差别。
sudo yum install mariadb-server
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mysql"&gt;配置mysql&lt;a class="headerlink" href="#mysql" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 第一次启动会检查/var/lib/mysql目录是否为空，不为空将返回失败
sudo service mysql start
# 设置mysql密码
sudo mysql_secure_installation
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果配置时有任何错误，可在/var/log/mariadb/mariadb.log里查看具体原因&lt;/p&gt;
&lt;h3 id="python-mysql"&gt;Python Mysql库安装&lt;a class="headerlink" href="#python-mysql" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install mysql-python
# Toolkit for Python-based database access.
sudo pip install dataset
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dataset"&gt;dataset常见操作&lt;a class="headerlink" href="#dataset" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://dataset.readthedocs.io/en/latest/api.html"&gt;dataset …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">
&lt;h3 id="centos7mysql"&gt;Centos7上安装mysql&lt;a class="headerlink" href="#centos7mysql" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install mysql mysql-devel
# centos7上已经使用mariadb替换了mysql，它们仅在安装配置上有些区别，使用上没有差别。
sudo yum install mariadb-server
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="mysql"&gt;配置mysql&lt;a class="headerlink" href="#mysql" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 第一次启动会检查/var/lib/mysql目录是否为空，不为空将返回失败
sudo service mysql start
# 设置mysql密码
sudo mysql_secure_installation
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果配置时有任何错误，可在/var/log/mariadb/mariadb.log里查看具体原因&lt;/p&gt;
&lt;h3 id="python-mysql"&gt;Python Mysql库安装&lt;a class="headerlink" href="#python-mysql" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install mysql-python
# Toolkit for Python-based database access.
sudo pip install dataset
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="dataset"&gt;dataset常见操作&lt;a class="headerlink" href="#dataset" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://dataset.readthedocs.io/en/latest/api.html"&gt;dataset&lt;/a&gt;库是对SQLAlchemy二次封装，使其操作数据库就像操作json文件一样方便。&lt;/p&gt;
&lt;h4 id="mysql_1"&gt;连接Mysql&lt;a class="headerlink" href="#mysql_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;db = dataset.connect('mysql://username:password@port/dbname?charset=utf8')
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="_1"&gt;添加记录&lt;a class="headerlink" href="#_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = {
    'key': 1,
    'column2': 2,
    'column3': 3,
}
# 插入记录，如果key，存在则报错
db[t_name].insert(data, ['key'])
# 插入记录，如果key，存在则更新
db[t_name].upsert(data, ['key'])
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="_2"&gt;查找记录&lt;a class="headerlink" href="#_2" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 打印表的字段
print self.db['t_name'].columns

# 打印表中所有数据
for row_data in self.db['t_name'].all():
    print row_data

# 根据多个条件找记录, 返回的是列表
self.db['t_name'].find(key1 = 1, key2 =2)

# 返回一条记录
self.db['t_name'].find_one(key1 = 1, key2 =2)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;考虑到find()查找性能，也可以使用原生的sql语句来进行query&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select * from t_name limit 99
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="_3"&gt;更新记录&lt;a class="headerlink" href="#_3" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = {
    'key': 1,
    'column2': 2,
    'column3': 3,
}
self.db['t_name'].update(data, ['key'])
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="_4"&gt;删除记录&lt;a class="headerlink" href="#_4" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;self.db['t_name'].delete(key1=1, key2=2)
# 删除所有记录
self.db['t_name'].delete()
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="dataset_1"&gt;关于dataset导出数据&lt;a class="headerlink" href="#dataset_1" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;现在dataset被分离成两个模块，如果想导出数据请看&lt;a href="https://github.com/pudo/datafreeze"&gt;datafreeze&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;详细用法请见&lt;a href="https://dataset.readthedocs.io/en/latest/"&gt;dataset readthedocs&lt;/a&gt;&lt;/p&gt;</content><category term="Python"></category><category term="dataset"></category></entry><entry><title>如何在unittest cases之间传递变量</title><link href="https://acefei.github.io/ru-he-zai-unittest-caseszhi-jian-chuan-di-bian-liang.html" rel="alternate"></link><published>2017-10-26T09:53:00+08:00</published><updated>2017-10-26T09:53:00+08:00</updated><author><name>Ace Fei</name></author><id>tag:acefei.github.io,2017-10-26:/ru-he-zai-unittest-caseszhi-jian-chuan-di-bian-liang.html</id><summary type="html">&lt;p&gt;想必大家在写Python UT的时候，偶尔会遇到一些测试用例需要同时测试CRUD的接口。
这时需要在test cases之间传递变量该如何做呢？&lt;/p&gt;
&lt;p&gt;一开始，我们想既然是在一个class里，直接给instance增加attribute不就好了么?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transmit_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transmit_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transmit_var&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果...想当然了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test_1 (__main__ …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;想必大家在写Python UT的时候，偶尔会遇到一些测试用例需要同时测试CRUD的接口。
这时需要在test cases之间传递变量该如何做呢？&lt;/p&gt;
&lt;p&gt;一开始，我们想既然是在一个class里，直接给instance增加attribute不就好了么?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transmit_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transmit_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transmit_var&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果...想当然了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test_1 (__main__.TestA) ... ok
test_2 (__main__.TestA) ... None
ok

----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;知识点一：在unittest中, 执行每个testcase的时候，会刷新instance attribute&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;既然self不行，那cls呢？&lt;/p&gt;
&lt;p&gt;那我们再想想unittest在执行class级别的setup，teardown的时候，其中的class attribute是不是对每个testcase都生效。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过查看源码可以知道self.&lt;strong&gt;class&lt;/strong&gt; is cls。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transmit_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transmit_var&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bingo！ &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test_1 (__main__.TestA) ... ok
test_2 (__main__.TestA) ... hello world
ok

----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;知识点二：在unittest中，绑定在class的attribute可以在testcase之间传递&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;温故而知新：
&lt;a href="https://www.python-course.eu/python3_class_and_instance_attributes.php"&gt;Class and Instance Attributes&lt;/a&gt;&lt;/p&gt;</content><category term="Python"></category><category term="unittest"></category></entry><entry><title>BloomFilter For Scrapy Redis</title><link href="https://acefei.github.io/bloomfilter-for-scrapy-redis.html" rel="alternate"></link><published>2017-09-21T15:29:00+08:00</published><updated>2017-09-21T15:29:00+08:00</updated><author><name>Ace Fei</name></author><id>tag:acefei.github.io,2017-09-21:/bloomfilter-for-scrapy-redis.html</id><summary type="html">&lt;h3 id="summary"&gt;Summary:&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This article will illustrate how to renovate scrapy-redis to dupefilter.&lt;/p&gt;
&lt;h3 id="why-use-bloomfilter"&gt;Why use bloomfilter&lt;a class="headerlink" href="#why-use-bloomfilter" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://alexeyvishnevsky.com/2013/11/tips-on-optimizing-scrapy-for-a-high-performance/"&gt;Tips on optimizing scrapy for a high performance&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-integrate-bloomfilter-into-scrapy-redis"&gt;How to integrate bloomfilter into scrapy redis&lt;a class="headerlink" href="#how-to-integrate-bloomfilter-into-scrapy-redis" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;copy scrapy_redis into the path alongside settings in scrapy project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implement bloom_filter.py in scrapy_redis path
   the code in https://github …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h3 id="summary"&gt;Summary:&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This article will illustrate how to renovate scrapy-redis to dupefilter.&lt;/p&gt;
&lt;h3 id="why-use-bloomfilter"&gt;Why use bloomfilter&lt;a class="headerlink" href="#why-use-bloomfilter" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://alexeyvishnevsky.com/2013/11/tips-on-optimizing-scrapy-for-a-high-performance/"&gt;Tips on optimizing scrapy for a high performance&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-to-integrate-bloomfilter-into-scrapy-redis"&gt;How to integrate bloomfilter into scrapy redis&lt;a class="headerlink" href="#how-to-integrate-bloomfilter-into-scrapy-redis" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;copy scrapy_redis into the path alongside settings in scrapy project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implement bloom_filter.py in scrapy_redis path
   the code in https://github.com/acefei/scrapy-redis-docker/blob/master/scrapy_redis_demo/scrapy_redis_demo/bloom_filter.py&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;modify scrapy_redis/dupefilter.py&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def __init__(self, server, key, debug=False):
        &amp;quot;&amp;quot;&amp;quot;Initialize the duplicates filter.

        Parameters
        ----------
        server : redis.StrictRedis
            The redis server instance.
        key : str
            Redis key Where to store fingerprints.
        debug : bool, optional
            Whether to log filtered requests.

        &amp;quot;&amp;quot;&amp;quot;
        self.server = server
        self.key = key
        self.debug = debug
        self.logdupes = True

        # 集成布隆过滤器
        self.bf = BloomFilter(conn=server, key=key)     # 利用连接池连接Redis
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def request_seen(self, request):
        &amp;quot;&amp;quot;&amp;quot;Returns True if request was already seen.

        Parameters
        ----------
        request : scrapy.http.Request

        Returns
        -------
        bool

        &amp;quot;&amp;quot;&amp;quot;
        # 集成布隆过滤器
        if self.bf.is_exist(fp):    # 判断如果域名在Redis里存在
            return True
        else:
            self.bf.add(fp)         # 如果不存在，将域名添加到Redis
            return False

        #fp = self.request_fingerprint(request)
        # This returns the number of values added, zero if already exists.
        #added = self.server.sadd(self.key, fp)
        #return added == 0
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Add scrapy_redis configration into settings.py
Note: use our scrapy_redis code like &lt;scrapy_project_name&gt;.scrapy_redis instead of scrapy_redis that created by pip install&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##################################
# Configuration for scrapy-redis {
DUPEFILTER_CLASS = &amp;quot;scrapy_redis_demo.scrapy_redis.dupefilter.RFPDupeFilter&amp;quot;
SCHEDULER = &amp;quot;scrapy_redis_demo.scrapy_redis.scheduler.Scheduler&amp;quot;
SCHEDULER_PERSIST = True

ITEM_PIPELINES = {
  &amp;#39;scrapy_redis_demo.scrapy_redis.pipelines.RedisPipeline&amp;#39;: 400,
}

# if u add &amp;#39;network_mode: &amp;quot;host&amp;quot;&amp;#39; in scraper service in docker-compose.yaml
# use host ip to access redis server
REDIS_HOST = &amp;#39;172.16.100.62&amp;#39;
# else use redis hostname to access redis server
#REDIS_HOST = &amp;#39;redis&amp;#39;
REDIS_PORT = 6379

# Specify your redis uri
# the uri scheme syntax: http://www.iana.org/assignments/uri-schemes/prov/redis
#REDIS_URL = &amp;#39;redis://172.16.100.62:6379&amp;#39;

# }
##################################
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;import &lt;scrapy_project_name&gt;.scrapy_redis in your spiders/xxxxx.py&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy_redis_demo.scrapy_redis.spiders&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RedisCrawlSpider&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category><category term="Scrapy"></category></entry><entry><title>Web Scraping Practice</title><link href="https://acefei.github.io/web-scraping-practice.html" rel="alternate"></link><published>2017-06-23T02:37:00+08:00</published><updated>2017-06-23T02:37:00+08:00</updated><author><name>Ace Fei</name></author><id>tag:acefei.github.io,2017-06-23:/web-scraping-practice.html</id><summary type="html">&lt;h3 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Recently, I found a &lt;a href="http://www.apexlegend.com/eas/media/"&gt;TOEIC test website&lt;/a&gt; with enomous mp3 materials.&lt;/p&gt;
&lt;p&gt;Just in time, I decided to scrape and download MP3 in parallel by python &lt;/p&gt;
&lt;h3 id="requirement"&gt;Requirement&lt;a class="headerlink" href="#requirement" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install lxml
# https://github.com/kennethreitz/grequests
pip install grequests
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="html-scraping"&gt;HTML Scraping&lt;a class="headerlink" href="#html-scraping" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://lxml.de/"&gt;lxml&lt;/a&gt; is a pretty extensive library written for parsing XML …&lt;/p&gt;</summary><content type="html">&lt;h3 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Recently, I found a &lt;a href="http://www.apexlegend.com/eas/media/"&gt;TOEIC test website&lt;/a&gt; with enomous mp3 materials.&lt;/p&gt;
&lt;p&gt;Just in time, I decided to scrape and download MP3 in parallel by python &lt;/p&gt;
&lt;h3 id="requirement"&gt;Requirement&lt;a class="headerlink" href="#requirement" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install lxml
# https://github.com/kennethreitz/grequests
pip install grequests
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="html-scraping"&gt;HTML Scraping&lt;a class="headerlink" href="#html-scraping" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://lxml.de/"&gt;lxml&lt;/a&gt; is a pretty extensive library written for parsing XML and HTML documents very quickly, even handling messed up tags in the process. We will also be using the &lt;a href="http://docs.python-requests.org/en/latest/"&gt;Requests&lt;/a&gt; module instead of the already built-in urllib2 module due to improvements in speed and readability. &lt;/p&gt;
&lt;p&gt;About the details, please refer to &lt;a href="http://docs.python-guide.org/en/latest/scenarios/scrape/#html-scraping"&gt;the link&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="concurrency"&gt;Concurrency&lt;a class="headerlink" href="#concurrency" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We will use &lt;a href="https://github.com/kennethreitz/grequests"&gt;GRequests&lt;/a&gt; which allows you to use Requests with Gevent to make asynchronous HTTP Requests easily. Or use the fork: &lt;a href="https://github.com/i-trofimtschuk/frequests"&gt;FRequests&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;The following need to be noted:&lt;/p&gt;
&lt;h4 id="1-using-pool-to-limit-concurrency"&gt;1. Using pool to limit concurrency.&lt;a class="headerlink" href="#1-using-pool-to-limit-concurrency" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;GRequests doesn't use pool by default, please see below code snippet: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def map(requests, stream=False, size=None, exception_handler=None, gtimeout=None):
    &amp;quot;&amp;quot;&amp;quot;Concurrently converts a list of Requests to Responses.
    :param requests: a collection of Request objects.
    :param stream: If True, the content will not be downloaded immediately.
    :param size: Specifies the number of requests to make at a time. If None, no throttling occurs.
    :param exception_handler: Callback function, called when exception occured. Params: Request, Exception
    :param gtimeout: Gevent joinall timeout in seconds. (Note: unrelated to requests timeout)
    &amp;quot;&amp;quot;&amp;quot;

    requests = list(requests)

    pool = Pool(size) if size else None

...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In my requirement, there are enomous links need to settle. If don't constrain concurrency, it would lead to the exception "gevent.hub.LoopExit: This operation would block forever".&lt;/p&gt;
&lt;h4 id="2-using-session-to-avoid-the-fd-consuming"&gt;2. Using session to avoid the fd consuming.&lt;a class="headerlink" href="#2-using-session-to-avoid-the-fd-consuming" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;There is a &lt;a href="https://github.com/kennethreitz/grequests/issues/54"&gt;same problem&lt;/a&gt; with me.&lt;/p&gt;
&lt;p&gt;Finally, the source code is available in &lt;a href="https://gist.github.com/acefei/2ca602d67e53011878dbf40f1ccda216#file-fetch_mp3_from_apexlegend-py"&gt;the gist&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="see-also"&gt;SEE ALSO:&lt;a class="headerlink" href="#see-also" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;http://xlambda.com/gevent-tutorial/&lt;/li&gt;
&lt;/ol&gt;</content><category term="python"></category><category term="grequests"></category></entry><entry><title>Make a Github Pages blog with Pelican</title><link href="https://acefei.github.io/make-a-github-pages-blog-with-pelican.html" rel="alternate"></link><published>2017-05-25T10:05:00+08:00</published><updated>2017-05-25T10:05:00+08:00</updated><author><name>Ace Fei</name></author><id>tag:acefei.github.io,2017-05-25:/make-a-github-pages-blog-with-pelican.html</id><summary type="html">
&lt;h2 id="make-a-github-pages-blog-with-pelican"&gt;Make a Github Pages blog with Pelican:&lt;a class="headerlink" href="#make-a-github-pages-blog-with-pelican" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="install-dependence"&gt;Install dependence&lt;a class="headerlink" href="#install-dependence" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;yum&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;BeautifulSoup4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="create-user-pages"&gt;Create user pages&lt;a class="headerlink" href="#create-user-pages" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are two basic types of GitHub Pages: &lt;a href="https://help.github.com/articles/user-organization-and-project-pages/"&gt;User/Organization Pages and Project Pages&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Generally, most people will select User Pages, and there are two …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="make-a-github-pages-blog-with-pelican"&gt;Make a Github Pages blog with Pelican:&lt;a class="headerlink" href="#make-a-github-pages-blog-with-pelican" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="install-dependence"&gt;Install dependence&lt;a class="headerlink" href="#install-dependence" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;yum&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;BeautifulSoup4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="create-user-pages"&gt;Create user pages&lt;a class="headerlink" href="#create-user-pages" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are two basic types of GitHub Pages: &lt;a href="https://help.github.com/articles/user-organization-and-project-pages/"&gt;User/Organization Pages and Project Pages&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Generally, most people will select User Pages, and there are two caveat as below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You must use the &lt;em&gt;username.github.io&lt;/em&gt; naming scheme.
Content from the &lt;em&gt;master&lt;/em&gt; branch will be used to build and publish your GitHub Pages site.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When User Pages are built, they are available at http(s)://username.github.io.&lt;/p&gt;
&lt;h3 id="set-up-the-blog-with-pelican"&gt;Set up the blog with Pelican&lt;a class="headerlink" href="#set-up-the-blog-with-pelican" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Create a new branch (pelican) for hosting pelican settings on github, please refer to &lt;a href="#publish"&gt;Publish&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/acefei/acefei.github.io
$ &lt;span class="nb"&gt;cd&lt;/span&gt; acefei.github.io/
$ git checkout -b pelican
$ pelican-quickstart
Welcome to pelican-quickstart v3.7.1.

This script will &lt;span class="nb"&gt;help&lt;/span&gt; you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; What will be the title of this web site? Acefei&lt;span class="err"&gt;'&lt;/span&gt;s Blog
&amp;gt; Who will be the author of this web site? acefei
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; https://acefei.github.io
&amp;gt; Do you want to &lt;span class="nb"&gt;enable&lt;/span&gt; article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; What is your &lt;span class="nb"&gt;time&lt;/span&gt; zone? &lt;span class="o"&gt;[&lt;/span&gt;Europe/Paris&lt;span class="o"&gt;]&lt;/span&gt; Asia/Shanghai
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; Y
&amp;gt; Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;username.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; Y
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="write-first-post"&gt;&lt;a href="http://docs.getpelican.com/en/3.6.3/content.html"&gt;Write first post&lt;/a&gt;&lt;a class="headerlink" href="#write-first-post" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To facilitate blog creation, I write &lt;a href="https://raw.githubusercontent.com/acefei/acefei.github.io/pelican/create_new_blog.sh"&gt;a script&lt;/a&gt; for creating the template with md format.&lt;/p&gt;
&lt;p&gt;Generate HTML pages and pre-view via http://localhost:8000/&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make html &amp;amp;&amp;amp; make serve&amp;amp;
firefox http://localhost:8000/
# After pre-view 
fg
# Then, Ctrl+C to terminate the process
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="publish"&gt;Publish&lt;a class="headerlink" href="#publish" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If everything is OK, generate the website.       &lt;br/&gt;
Currently, all pelican settings that are used to render HTML are on pelican branch.     &lt;br/&gt;
As previously mentioned, the static website content should be pulish from master branch.     &lt;br/&gt;
So, I need to publish respectively:    &lt;br/&gt;
For static website: (on &lt;a href="https://github.com/acefei/acefei.github.io/tree/master"&gt;master branch&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make github
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For pelican settings: (on &lt;a href="https://github.com/acefei/acefei.github.io/tree/pelican"&gt;pelican branch&lt;/a&gt;)       &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo -e "*.pyc\noutput/" &amp;gt;&amp;gt; .gitignore
git add .
git commit -m "commit pelican setting"
git push -u origin pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="extension"&gt;Extension&lt;a class="headerlink" href="#extension" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="theme"&gt;Theme&lt;a class="headerlink" href="#theme" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Clone your fevorite &lt;a href="http://pelicanthemes.com/"&gt;theme&lt;/a&gt;, such as &lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features"&gt;elegant&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir pelican-themes
cd pelican-themes
git clone git://github.com/talha131/pelican-elegant.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, add something like this to  pelicanconf.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;THEME = "pelican-themes/pelican-elegant"
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note:          &lt;br/&gt;
1. Under GFW, we need to find an alternative CDN site to replace googleapis in theme folder.
2. If you want to add the theme into your pelican branch, remove the .git* path under the theme folder.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="plugin"&gt;Plugin&lt;a class="headerlink" href="#plugin" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Clone the plugin repo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/getpelican/pelican-plugins.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, add following contents into pelicanconf.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;###### plugin configuration #######
PLUGIN_PATHS = ['pelican-plugins']
PLUGINS = ['sitemap', 'extract_toc', 'tipue_search']
SITEMAP = {
'format': 'xml',
'priorities': {
    'articles': 0.5,
    'indexes': 0.5,
    'pages': 0.5
    },
'changefreqs': {
    'articles': 'weekly',
    'indexes': 'daily',
    'pages': 'monthly'
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, plugin install completely.&lt;/p&gt;
&lt;h4 id="pelican-settings"&gt;Pelican settings&lt;a class="headerlink" href="#pelican-settings" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;There are enhancements in &lt;a href="https://github.com/acefei/acefei.github.io/blob/pelican/pelicanconf.py"&gt;pelicanconfig.py&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Blog &lt;a href="http://oncrashreboot.com"&gt;&lt;code&gt;onCrash=Reboot();&lt;/code&gt;&lt;/a&gt; uses Elegant theme. You
can see its configuration files at
&lt;a href="https://github.com/talha131/onCrashReboot"&gt;Github&lt;/a&gt; for inspiration. &lt;/p&gt;
&lt;/blockquote&gt;</content><category term="python"></category><category term="pelican"></category></entry></feed>