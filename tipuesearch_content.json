{"pages":[{"url":"web-scraping-practice.html","text":"Background Recently, I found a TOEIC test website with enomous mp3 materials. Just in time, I decided to download by automation script. Requirement pip install lxml # https://github.com/kennethreitz/grequests pip install grequests HTML Scraping lxml is a pretty extensive library written for parsing XML and HTML documents very quickly, even handling messed up tags in the process. We will also be using the Requests module instead of the already built-in urllib2 module due to improvements in speed and readability. About the details, please refer to http://docs.python-guide.org/en/latest/scenarios/scrape/#html-scraping Concurrency We will use GRequests which allows you to use Requests with Gevent to make asynchronous HTTP Requests easily. Note: 1. Using pool to limit concurrency. GRequests doesn't use pool by default, please see below code snippet: def map(requests, stream=False, size=None, exception_handler=None, gtimeout=None): \"\"\"Concurrently converts a list of Requests to Responses. :param requests: a collection of Request objects. :param stream: If True, the content will not be downloaded immediately. :param size: Specifies the number of requests to make at a time. If None, no throttling occurs. :param exception_handler: Callback function, called when exception occured. Params: Request, Exception :param gtimeout: Gevent joinall timeout in seconds. (Note: unrelated to requests timeout) \"\"\" requests = list(requests) pool = Pool(size) if size else None ... In my requirement, there are enomous links need to settle. If don't constrain concurrency, it would lead to the exception \"gevent.hub.LoopExit: This operation would block forever\". Using session to avoid the fd consuming. Please refer to the issue . The source code is available in git gist SEE ALSO: http://xlambda.com/gevent-tutorial/","tags":"Python","title":"Web Scraping Practice"},{"url":"make-a-github-pages-blog-with-pelican.html","text":"Make a Github Pages blog with Pelican: Install dependence sudo yum install - y git sudo pip install pelican markdown ghp - import BeautifulSoup4 Create user pages There are two basic types of GitHub Pages: User/Organization Pages and Project Pages . Generally, most people will select User Pages, and there are two caveat as below: You must use the username.github.io naming scheme. Content from the master branch will be used to build and publish your GitHub Pages site. When User Pages are built, they are available at http(s)://username.github.io. Set up the blog with Pelican Create a new branch (pelican) for hosting pelican settings on github, please refer to Publish $ git clone https://github.com/acefei/acefei.github.io $ cd acefei.github.io/ $ git checkout -b pelican $ pelican-quickstart Welcome to pelican-quickstart v3.7.1. This script will help you create a new Pelican-based website. Please answer the following questions so this script can generate the files needed by Pelican. > Where do you want to create your new web site? [ . ] > What will be the title of this web site? Acefei ' s Blog > Who will be the author of this web site? acefei > What will be the default language of this web site? [ en ] > Do you want to specify a URL prefix? e.g., http://example.com ( Y/n ) > What is your URL prefix? ( see above example ; no trailing slash ) https://acefei.github.io > Do you want to enable article pagination? ( Y/n ) n > What is your time zone? [ Europe/Paris ] Asia/Shanghai > Do you want to generate a Fabfile/Makefile to automate generation and publishing? ( Y/n ) > Do you want an auto-reload & simpleHTTP script to assist with theme and site development? ( Y/n ) > Do you want to upload your website using FTP? ( y/N ) > Do you want to upload your website using SSH? ( y/N ) > Do you want to upload your website using Dropbox? ( y/N ) > Do you want to upload your website using S3? ( y/N ) > Do you want to upload your website using Rackspace Cloud Files? ( y/N ) > Do you want to upload your website using GitHub Pages? ( y/N ) Y > Is this your personal page ( username.github.io ) ? ( y/N ) Y Write first post To facilitate blog creation, I write a script for creating the template with md format. Generate HTML pages and pre-view via http://localhost:8000/ make html && make serve& firefox http://localhost:8000/ # After pre-view fg # Then, Ctrl+C to terminate the process Publish If everything is OK, generate the website. Currently, all pelican settings that are used to render HTML are on pelican branch. As previously mentioned, the static website content should be pulish from master branch. So, I need to publish respectively: For static website: (on master branch ) make github For pelican settings: (on pelican branch ) echo -e \"*.pyc\\noutput/\" >> .gitignore git add . git commit -m \"commit pelican setting\" git push -u origin pelican Extension Theme Clone your fevorite theme , such as elegant mkdir pelican-themes cd pelican-themes git clone git://github.com/talha131/pelican-elegant.git Then, add something like this to pelicanconf.py THEME = \"pelican-themes/pelican-elegant\" Caveat: 1. Under GFW, we need to find an alternative CDN site to replace googleapis, I use a script to do it. 2. If you want to add the theme into your pelican branch, remove the .git* path under the theme folder. Plugin Clone the plugin repo. git clone git://github.com/getpelican/pelican-plugins.git Then, add following contents into pelicanconf.py ###### plugin configuration ####### PLUGIN_PATHS = ['pelican-plugins'] PLUGINS = ['sitemap', 'extract_toc', 'tipue_search'] SITEMAP = { 'format': 'xml', 'priorities': { 'articles': 0.5, 'indexes': 0.5, 'pages': 0.5 }, 'changefreqs': { 'articles': 'weekly', 'indexes': 'daily', 'pages': 'monthly' } } Ok, plugin install completely. Pelican settings There are enhancements in pelicanconfig.py Reference Blog onCrash=Reboot(); uses Elegant theme. You can see its configuration files at Github for inspiration.","tags":"Python","title":"Make a Github Pages blog with Pelican"}]}